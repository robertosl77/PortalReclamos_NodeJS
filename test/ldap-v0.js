import ldap from 'ldapjs';

// Configuraci√≥n LDAP con valores literales para pruebas
const ldapConfig = {
  url: 'ldap://192.168.146.214:389',
  bindDN: 'CN=SVC_consulta_ot,OU=Cuentas de Servicio,DC=qa,DC=edenor',
  bindCredentials: 'edenor2020',
  searchBase: 'ou=Edificios,DC=qa,DC=edenor',
  searchFilter: '(sAMAccountName={{username}})'
};

// Usuario y contrase√±a literales para pruebas
const testUsername = 'DDPP_Administrador';
const testPassword = 'Edenor2025';

// Funci√≥n para autenticar un usuario
async function authenticateUser(username, password) {
  return new Promise((resolve, reject) => {
    console.log('üîç Iniciando autenticaci√≥n LDAP para:', username);
    console.log('üîå Conectando a servidor:', ldapConfig.url);
    
    // Crear cliente LDAP
    const client = ldap.createClient({
      url: ldapConfig.url,
      reconnect: true,
      timeout: 5000,
      connectTimeout: 10000
    });
    
    // Eventos de conexi√≥n para depuraci√≥n
    client.on('connect', () => {
      console.log('‚úÖ Conectado al servidor LDAP');
    });
    
    client.on('connectError', (err) => {
      console.error('‚ùå Error de conexi√≥n:', err.message);
    });
    
    client.on('timeout', () => {
      console.error('‚è±Ô∏è Timeout en la conexi√≥n');
    });
    
    client.on('error', (err) => {
      console.error('‚ùå Error general:', err.message);
    });
    
    // Reemplazar el placeholder en el filtro
    const searchFilter = ldapConfig.searchFilter.replace('{{username}}', username);
    
    console.log('üîê Intentando bind con cuenta de servicio:', ldapConfig.bindDN);
    
    // Bind con la cuenta de servicio
    client.bind(ldapConfig.bindDN, ldapConfig.bindCredentials, (bindErr) => {
      if (bindErr) {
        console.error('‚ùå Error en bind de servicio:', bindErr.message);
        console.error('   C√≥digo:', bindErr.code);
        client.destroy();
        return reject(bindErr);
      }

      console.log('‚úÖ Bind de servicio exitoso');
      console.log('üîç Buscando usuario con filtro:', searchFilter);
      
      // Buscar el usuario
      client.search(ldapConfig.searchBase, {
        filter: searchFilter,
        scope: 'sub',
        attributes: ['dn', 'cn', 'mail', 'sAMAccountName']
      }, (searchErr, searchRes) => {
        if (searchErr) {
          console.error('‚ùå Error en b√∫squeda:', searchErr.message);
          client.destroy();
          return reject(searchErr);
        }

        let userDN = null;

        searchRes.on('searchEntry', (entry) => {
          userDN = entry.objectName;
          console.log('‚úÖ Usuario encontrado:', userDN);
          console.log('   DN completo:', JSON.stringify(userDN));
          
          // Mostrar atributos encontrados (usando .values en lugar de .vals)
          entry.attributes.forEach(attr => {
            const values = attr.values || attr.vals || [];
            console.log(`   ${attr.type}:`, values.join(', '));
          });
        });

        searchRes.on('error', (err) => {
          console.error('‚ùå Error en resultado de b√∫squeda:', err.message);
          client.destroy();
          reject(err);
        });

        searchRes.on('end', () => {
          if (!userDN) {
            console.log('‚ùå Usuario no encontrado');
            client.destroy();
            return resolve(false);
          }

          console.log('üîê Intentando autenticar usuario con su DN');
          console.log('   Tipo de userDN:', typeof userDN);
          
          // Asegurarse de que userDN sea una cadena
          const userDNString = typeof userDN === 'object' ? userDN.toString() : userDN;
          console.log('   userDN como string:', userDNString);
          
          // Asegurarse de que la contrase√±a sea una cadena
          const passwordString = String(password);
          console.log('   Longitud de contrase√±a:', passwordString.length);
          
          // Autenticar con las credenciales del usuario
          try {
            client.bind(userDNString, passwordString, (userBindErr) => {
              if (userBindErr) {
                console.log('‚ùå Autenticaci√≥n fallida:', userBindErr.message);
                console.log('   C√≥digo de error:', userBindErr.code);
                client.destroy();
                return resolve(false);
              }

              console.log('‚úÖ Autenticaci√≥n exitosa para:', username);
              client.destroy();
              resolve(true);
            });
          } catch (bindError) {
            console.error('‚ùå Error al intentar bind:', bindError.message);
            client.destroy();
            resolve(false);
          }
        });
      });
    });
  });
}

// Funci√≥n principal de prueba
async function runTest() {
  console.log('=== INICIANDO PRUEBA DE CONEXI√ìN LDAP ===');
  console.log('Configuraci√≥n:');
  console.log('- URL:', ldapConfig.url);
  console.log('- BindDN:', ldapConfig.bindDN);
  console.log('- SearchBase:', ldapConfig.searchBase);
  console.log('- Usuario de prueba:', testUsername);
  
  try {
    console.log('\nüß™ Probando autenticaci√≥n...');
    const isAuthenticated = await authenticateUser(testUsername, testPassword);
    
    console.log('\n=== RESULTADO ===');
    if (isAuthenticated) {
      console.log('‚úÖ AUTENTICACI√ìN EXITOSA');
    } else {
      console.log('‚ùå AUTENTICACI√ìN FALLIDA');
    }
  } catch (error) {
    console.error('\n=== ERROR CR√çTICO ===');
    console.error('Mensaje:', error.message);
    console.error('Stack:', error.stack);
  }
  
  console.log('\n=== FIN DE PRUEBA ===');
}

// Ejecutar la prueba
runTest();